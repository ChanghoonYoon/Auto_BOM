# -*- coding: utf-8 -*-
"""BOM_Maker_V2_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Q8XGbX4YCQrA7v7cBFEZ-S9IoWTD4Az

# 0. 사용방법

1. shift + enter
2. 원안의 화살표 버튼 클릭

위의 방법중 하나를 선택하셔서, 순차적으로 다운로드하시면 됩니다

# 1. PIP 다운로드
"""

pip install anthropic

"""# 2. 파일 업로드

bom.excel 파일을 txt 형식으로 변환해서 올리시면됩니다.
"""

from google.colab import files
from IPython.display import clear_output


uploaded = files.upload()

for filename in uploaded.keys():
    print(f'User uploaded file "{filename}" with length {len(uploaded[filename])} bytes')

"""# 3. 엑셀 파일 생성

**V2.2 업데이트 항목**

1) capaciotr, resistor => chip res, chip cap 변경

2) 파일이름, bom 제목, txt 기준으로 자동 변경

3) 시간 추가(예정)

4) 프롬프트 수정 : Strength -> Capacitance
"""

import anthropic
import csv
import os
import pandas as pd
import google.colab as output

# Anthropic API 키 설정
API_KEY = "Insert your key!"
client = anthropic.Client(api_key=API_KEY)
# CSV 파일 읽기
def read_csv(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        reader = csv.reader(file)
        return list(reader)

# Claude API로 질문 보내기
def ask_claude(csv_content, question):
    prompt = f"""Here's the content of the CSV file:

{csv_content}

Question: {question}

Please answer the question based on the CSV content."""

    response = client.messages.create(
        model="claude-3-5-sonnet-20240620",
        max_tokens=2000,
        temperature=0,
        messages=[
            {"role": "user", "content": prompt}
        ]
    )

    return response.content[0].text

# 메인 실행 코드
if __name__ == "__main__":
    csv_file_path = rf"/content/{filename}"
    # CSV 파일 경로를 지정하세요
    csv_content = read_csv(csv_file_path)

    #제목 추출
    extract_sub = csv_content[0][0].split('Revised')
    extract_sub = extract_sub[0]

    # CSV 내용을 문자열로 변환
    csv_str = "\n".join([",".join(row) for row in csv_content])

    question = """
    THIS IS BOM OF PCB. Classify by category, specification, reference, and quantity.
    Properly distinguish between beads and inductors.
    Convert it to a format that can be used in Excel files.
    The order is first capacitor, second resistor, in ascending order of Capacitance.
    Add each classified category name to the column.
    Just give me the data without any explanation.

    """  # 원하는 질문으로 변경하세요

    answer = ask_claude(csv_str, question)
    print("Claude의 답변:", answer)
import pandas as pd
import io
import re
from openpyxl import Workbook
from openpyxl.styles import Font, Border, Side, PatternFill, Alignment
from openpyxl.utils import get_column_letter
from openpyxl.worksheet.datavalidation import DataValidation
from datetime import date
from openpyxl.styles import Font, Border, Side, PatternFill, Alignment, Color, Border, Side


#제목 추출
extract_sub = read_csv(fr"/content/{filename}")
extract_sub = extract_sub[0][0].split('Revised')
extract_sub = extract_sub[0]
extract_sub = extract_sub.replace(" ", "_")

# CSV 데이터를 DataFrame으로 변환
df = pd.read_csv(io.StringIO(answer))

# 새 워크북 생성
wb = Workbook()
ws = wb.active
ws.title = "BOM"

# 제목 추가
ws['B1'] = f"{extract_sub}"
ws['B1'].font = Font(bold=True, size=16)
ws.merge_cells('B1:F1')

# 수량 입력 칸 추가
ws['G1'] = "생산수량:"
ws['H1'] = 1  # 기본값 설정
ws['G1'].font = Font(bold=True)
ws['H1'].font = Font(bold=True)
ws['B1'].alignment = Alignment(horizontal='center', vertical='center')  # B1 셀 가운데 정렬
ws['H1'].font = Font(bold=True, color="FF0000")  # 빨간색 설정
ws['H1'].alignment = Alignment(horizontal='center', vertical='center')  # H1 셀 가운데 정렬
ws['G1'].alignment = Alignment(horizontal='center', vertical='center')  # G1 셀 가운데 정렬

# 날짜 추가
today = date.today().strftime("%Y-%m-%d")
ws['B2'] = f"Date: {today}"
ws['B2'].font = Font(italic=True, bold=True)

default_font = Font(bold=True)

# 헤더 추가
headers = ["No", "Category", "Specification", "Package(mm)", "Reference", "Quantity", "Total Qt", "In Stock", "Required", "Remarks"]
for c, header in enumerate(headers, start=2):
    ws.cell(row=4, column=c, value=header)

# 데이터프레임을 워크시트에 쓰기 (5행부터 시작)
for r, row in enumerate(df.values, start=5):
    no_cell = ws.cell(row=r, column=2, value=r-4)
    no_cell.font = default_font
    for c, value in enumerate(row, start=3):
        if c < 5:  # Package 열 이전까지는 그대로 입력
            data_cell = ws.cell(row=r, column=c, value=value)
            data_cell.font = default_font
        elif c == 5:  # Package 열에 빈 값 입력
            data_cell = ws.cell(row=r, column=c, value="")
            data_cell.font = default_font
            reference_cell = ws.cell(row=r, column=c+1, value=value)
            reference_cell.font = default_font
        else:  # 나머지 열들도 한 칸씩 뒤로
            data_cell = ws.cell(row=r, column=c+1, value=value)
            data_cell.font = default_font

# 같은 카테고리 셀 병합
current_category = None
start_row = 5

for row in range(5, ws.max_row + 1):
    category = ws.cell(row=row, column=3).value
    if category != current_category:
        if current_category is not None:
            # 이전 카테고리 셀 병합
            if start_row < row - 1:
                ws.merge_cells(f'C{start_row}:C{row-1}')
        current_category = category
        start_row = row

# 마지막 카테고리 셀 병합
if start_row < ws.max_row:
    ws.merge_cells(f'C{start_row}:C{ws.max_row}')

# 병합된 셀의 정렬 조정
for merged_range in ws.merged_cells.ranges:
    if merged_range.min_col == 3:  # C열(카테고리 열)
        ws.cell(row=merged_range.min_row, column=3).alignment = Alignment(horizontal='center', vertical='center')

# Total Quantity 계산 공식 추가
for row in range(5, len(df) + 5):
    quantity_cell = ws.cell(row=row, column=7)
    total_quantity_cell = ws.cell(row=row, column=8)
    total_quantity_cell.value = f"={quantity_cell.coordinate}*$H$1"
    total_quantity_cell.font = Font(bold=True)  # 굵은 글씨 적용


# Required 계산 공식 추가
for row in range(5, len(df) + 5):
    total_quantity_cell = ws.cell(row=row, column=8)
    in_stock_cell = ws.cell(row=row, column=9)
    required_cell = ws.cell(row=row, column=10)
    required_cell.value = f"=MAX(0, {total_quantity_cell.coordinate}-{in_stock_cell.coordinate})"
    required_cell.font = Font(bold=True)  # 굵은 글씨 적용

# 스타일 설정 (변경된 부분)
header_font = Font(bold=True)
header_fill = PatternFill(start_color="B4C6E7", end_color="B4C6E7", fill_type="solid")
#thin_border = Border(left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin'))
#thick_border = Border(left=Side(style='thick'), right=Side(style='thick'), top=Side(style='thick'), bottom=Side(style='thick'))

category_colors = {
    "Resistor": "FFD9D9",      # 연한 빨강
    "Capacitor": "D9FFD9",     # 연한 초록
    "Diode": "FFE6B3",         # 연한 주황
    "Transistor": "B3E6FF",    # 연한 파랑
    "Crystal": "E6B3FF",       # 연한 보라
    "LED": "FFFFB3",           # 연한 노랑
    "Inductor": "FFB3D9",      # 연한 분홍
    "Bead": "D9E6FF",          # 매우 연한 파랑
    "ESD Protection": "E6FFB3", # 연한 라임
    "IC": "B3FFE6",            # 연한 민트
    "Connector": "FFD9B3",     # 연한 복숭아
    "Switch": "D9FFE6",        # 연한 청록
    "Buzzer": "E6D9FF",        # 연한 라벤더
    "Test Point": "FFE6E6",  # 매우 연한 분홍
    "TP": "FFE6E6",  # 매우 연한 분홍,
    "Others": "E6E6E6"         # 연한 회색
}


# 스타일 적용 (변경된 부분)
for row in ws.iter_rows(min_row=4, max_row=ws.max_row, min_col=2, max_col=ws.max_column):
    for cell in row:
        thin_border = Border(left=Side(style='thin'),
                     right=Side(style='thin'),
                     top=Side(style='thin'),
                     bottom=Side(style='thin'))

        thick_border = Border(left=Side(style='thick'),
                      right=Side(style='thick'),
                      top=Side(style='thick'),
                      bottom=Side(style='thick'))
        cell.border = thin_border
        cell.alignment = Alignment(horizontal='center', vertical='center')

        if cell.row == 4 or cell.column == 2:  # 헤더 행이거나 No 열인 경우
            cell.font = header_font
            cell.fill = header_fill
        else:
            category = ws.cell(row=cell.row, column=3).value
            if category in category_colors:
                fill_color = category_colors[category]
                cell.fill = PatternFill(start_color=fill_color, end_color=fill_color, fill_type="solid")

            if cell.column in [4, 5, 6]:  # D열, E열, F열 정렬 해제
                cell.alignment = Alignment(horizontal='left', vertical='center')

# A열의 스타일 제거
for cell in ws['A']:
    cell.border = None
    cell.fill = PatternFill(fill_type=None)

# 외곽 테두리 두껍게 설정 (새로 추가된 부분)
last_row = ws.max_row
last_col = ws.max_column

for col in range(2, last_col + 1):
    ws.cell(row=4, column=col).border = Border(top=Side(style='thick'), left=Side(style='thin'), right=Side(style='thin'), bottom=Side(style='thin'))
    ws.cell(row=last_row, column=col).border = Border(bottom=Side(style='thick'), left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'))

for row in range(4, last_row + 1):
    ws.cell(row=row, column=2).border = Border(left=Side(style='thick'), top=Side(style='thin'), bottom=Side(style='thin'), right=Side(style='thin'))
    ws.cell(row=row, column=last_col).border = Border(right=Side(style='thick'), top=Side(style='thin'), bottom=Side(style='thin'), left=Side(style='thin'))

# 모서리 셀 테두리 수정 (새로 추가된 부분)
ws.cell(row=4, column=2).border = Border(left=Side(style='thick'), top=Side(style='thick'), right=Side(style='thin'), bottom=Side(style='thin'))
ws.cell(row=4, column=last_col).border = Border(right=Side(style='thick'), top=Side(style='thick'), left=Side(style='thin'), bottom=Side(style='thin'))
ws.cell(row=last_row, column=2).border = Border(left=Side(style='thick'), bottom=Side(style='thick'), right=Side(style='thin'), top=Side(style='thin'))
ws.cell(row=last_row, column=last_col).border = Border(right=Side(style='thick'), bottom=Side(style='thick'), left=Side(style='thin'), top=Side(style='thin'))

# 열 너비 조정
width = 10  # 기본 너비
for column in ws.columns:
    max_length = 0
    column_letter = get_column_letter(column[0].column)
    for cell in column:
        try:
            if len(str(cell.value)) > max_length:
                max_length = len(cell.value)
        except:
            pass
    adjusted_width = (max_length + 2)
    ws.column_dimensions[column_letter].width = adjusted_width
    ws.column_dimensions['B'].width = 6  # A열의 너비를 6으로 설정
    ws.column_dimensions['F'].width = 40  # E열의 너비를 40으로 설정
    ws.column_dimensions['G'].width = width  # F열의 너비를 10으로 설정
    ws.column_dimensions['H'].width = width  # E열의 너비를 10으로 설정
    ws.column_dimensions['I'].width = width  # E열의 너비를 10으로 설정
    ws.column_dimensions['J'].width = width  # E열의 너비를 10으로 설정
    ws.column_dimensions['K'].width = 25  # J열의 너비를 16으로 설정


# 'resister' 문자열을 찾아 'chip capacitor'로 변경
for row in ws.iter_rows():
    for cell in row:
        if cell.value == 'Resistor':
            cell.value = 'Chip Res'
        if cell.value == 'Capacitor':
            cell.value = 'Chip Cap'


# Production Quantity 셀에 데이터 유효성 검사 추가
dv = DataValidation(type="whole", operator="greaterThan", formula1=0)
dv.error = "Please enter a positive integer"
dv.errorTitle = "Invalid Input"
ws.add_data_validation(dv)
dv.add('H1')

# 파일 저장
excel_file = f'{extract_sub}.xlsx'
wb.save(excel_file)

print(f"Excel 파일이 생성되었습니다: {extract_sub}xlsx")

